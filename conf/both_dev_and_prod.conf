ebean.default = ["models.*","base.models.*"]

application.nodeId = 0
application.nodeId = ${?nodeId}

application.dev-test-email="tb+test@intteh.com"
application.dev-test-phone="+380679887777"

play.allowGlobalApplication=false
play.http.errorHandler = "base.ErrorHandler"
play.http.requestHandler = "play.api.http.DefaultHttpRequestHandler"

//play.application.loader="base.ApplicationLoader"
//play.modules.enabled += "base.EbeanModule"
play.modules.enabled += "base.mailer.MailerModule"
play.modules.enabled += "jobs.ArchivesMoveJobs"

play.filters.enabled=[]

play.filters.hosts {
  # Allow requests to example.com, its subdomains, and localhost:9000.
  allowed = ["127.0.0.1:9000", "localhost:9000", "192.168.1.87:9000"]
}

play.filters.headers.frameOptions = null #- sets X-Frame-Options, “DENY” by default.
play.filters.headers.xssProtection = null # - sets X-XSS-Protection, “1; mode=block” by default.
play.filters.headers.contentTypeOptions = null # - sets X-Content-Type-Options, “nosniff” by default.
play.filters.headers.permittedCrossDomainPolicies = null # - sets X-Permitted-Cross-Domain-Policies, “master-only” by default.
play.filters.headers.contentSecurityPolicy =  null #"default-src 'self'" # - sets Content-Security-Policy, “default-src ‘self’” by default.
play.filters.headers.referrerPolicy = null #"origin-when-cross-origin, strict-origin-when-cross-origin"
play.filters.headers.allowActionSpecificHeaders = false

pidfile.path = "/dev/null"

play.cache.bindCaches = ["user-cache"]

play.server {

  # The server provider class name
  provider = "play.core.server.NettyServerProvider"

  netty {

    # The number of event loop threads. 0 means let Netty decide, which by default will select 2 times the number of
    # available processors.
    eventLoopThreads = 0

    # The maximum length of the initial line. This effectively restricts the maximum length of a URL that the server will
    # accept, the initial line consists of the method (3-7 characters), the URL, and the HTTP version (8 characters),
    # including typical whitespace, the maximum URL length will be this number - 18.
    maxInitialLineLength = 4096

    # The maximum length of the HTTP headers. The most common effect of this is a restriction in cookie length, including
    # number of cookies and size of cookie values.
    maxHeaderSize = 8192

    # The maximum length of body bytes that Netty will read into memory at a time.
    # This is used in many ways.  Note that this setting has no relation to HTTP chunked transfer encoding - Netty will
    # read "chunks", that is, byte buffers worth of content at a time and pass it to Play, regardless of whether the body
    # is using HTTP chunked transfer encoding.  A single HTTP chunk could span multiple Netty chunks if it exceeds this.
    # A body that is not HTTP chunked will span multiple Netty chunks if it exceeds this or if no content length is
    # specified. This only controls the maximum length of the Netty chunk byte buffers.
    maxChunkSize = 8192

    # Whether the Netty wire should be logged


    # The transport to use, either jdk or native.
    # Native socket transport has higher performance and produces less garbage but are only available on linux


    # Netty options. Possible keys here are defined by:
    #
    # http://netty.io/4.0/api/io/netty/channel/ChannelOption.html
    #
    # Options that pertain to the listening server socket are defined at the top level, options for the sockets associated
    # with received client connections are prefixed with child.*
    option {

      # Set the size of the backlog of TCP connections.  The default and exact meaning of this parameter is JDK specific.
      # SO_BACKLOG = 100

      child {
        # Set whether connections should use TCP keep alive
        # SO_KEEPALIVE = false

        # Set whether the TCP no delay flag is set
        # TCP_NODELAY = false
      }

    }

  }
}

play.http.parser.maxDiskBuffer=200MB

parsers.anyContent.maxLength=200MB


